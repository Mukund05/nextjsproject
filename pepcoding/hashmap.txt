public class Main {

  public static class HashMap<K, V> {
    private class HMNode {
      K key;
      V value;

      HMNode(K key, V value) {
        this.key = key;
        this.value = value;
      }
    }

    private int size; // n
    private LinkedList<HMNode>[] buckets; // N = buckets.length

    public HashMap() {
      initbuckets(4);
      size = 0;
    }

    private void initbuckets(int N) {
      buckets = new LinkedList[N];
      for (int bi = 0; bi < buckets.length; bi++) {
        buckets[bi] = new LinkedList<>();
      }
    }
    
    private int hashfn(K key){
        int idx=key.hashCode();
        return Math.abs(idx)%buckets.length;
    }
    private int nodeadd(K key,int idx){
        int di=0;
        for(HMNode node:buckets[idx]){
            if(node.key.equals(key)){
                return di;
            }
            di++;
        }
        return -1;
    }

    public void put(K key, V value) throws Exception {
      // write your code here
      int index=hashfn(key);
      int nodeaddress=nodeadd(key,index);
      if(nodeaddress!=-1){
          HMNode node=buckets[index].get(nodeaddress);
          node.value=value;
      }else{
          HMNode node=new HMNode(key,value);
          buckets[index].add(node);
          size++;
      }
      double loadf=(1.0*size)/buckets.length;
      if(loadf>2.0){
          rehash();
      }
    }
    private void rehash() throws Exception{
        LinkedList<HMNode>[] old=buckets;
        initbuckets(old.length*2);
        size=0;
        for(int i=0;i<old.length;i++){
            for(HMNode node:old[i]){
                put(node.key,node.value);
            }
        }
    }

    public V get(K key) throws Exception {
        
      // write your code here
      int index=hashfn(key);
      int nodeaddress=nodeadd(key,index);
      if(nodeaddress!=-1){
          HMNode node=buckets[index].get(nodeaddress);
          return node.value;
      }else{
          return null;
      }
    }

    public boolean containsKey(K key) {
      // write your code here
      int index=hashfn(key);
      int nodeaddress=nodeadd(key,index);
      if(nodeaddress!=-1){
          return true;
      }else{
          return false;
      }
    }

    public V remove(K key) throws Exception {
      // write your code here
      int index=hashfn(key);
      int nodeaddress=nodeadd(key,index);
      if(nodeaddress!=-1){
          HMNode node=buckets[index].remove(nodeaddress);
          size--;
          return node.value;
      }else{
          return null;
      }
    }

    public ArrayList<K> keyset() throws Exception {
      // write your code here
      ArrayList<K> set=new ArrayList<>();
      for(int i=0;i<buckets.length;i++){
          for(HMNode node:buckets[i]){
              set.add(node.key);
          }
      }
      return set;
    }

    public int size() {
      // write your code here
      return size;
    }

   public void display() {
      System.out.println("Display Begins");
      for (int bi = 0; bi < buckets.length; bi++) {
        System.out.print("Bucket" + bi + " ");
        for (HMNode node : buckets[bi]) {
          System.out.print( node.key + "@" + node.value + " ");
        }
        System.out.println(".");
      }
      System.out.println("Display Ends");
  }
}